apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'pmd'

tasks.whenTaskAdded { task ->
    if (task.name.contains('assemble')) {
//        task.dependsOn 'pmd'
    }
    if (task.name.contains('assemble')
            && !task.name.contains('Snapshot')
            && !task.name.contains('Test')
            && !task.name.contains('Local')) {
        task.dependsOn 'javadocJar', 'sourcesJar'
    }
}

//task("generate${variant.name}Javadoc", type: Javadoc) {
//    title = "$name $version API"
//    source = variant.javaCompile.source
//    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
//    doFirst {
//        classpath = files(variant.javaCompile.classpath.files, ext.androidJar)
//    }
//    options {
//        links("http://docs.oracle.com/javase/11/docs/api/")
//        linksOffline("http://d.android.com/reference", "${android.sdkDirectory}/docs/reference")
//        encoding "UTF-8"
//        charSet 'UTF-8'
//        author true
//        version true
//        splitIndex true
//        noDeprecated true
//        setMemberLevel(JavadocMemberLevel.PUBLIC)
//    }
//    failOnError false
//    exclude '**/BuildConfig.java'
//    exclude '**/R.java'
//    destinationDir = reporting.file("$project.rootDir/docs/")
//}
// Task to generate javadoc
//task javadoc(type: Javadoc) {
//    failOnError false
//    source = android.sourceSets.main.java.srcDirs
//    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
//    doFirst {
//        classpath = files(variant.javaCompile.classpath.files, ext.androidJar)
//    }
//    classpath += configurations.compile
//    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
//
//    options.memberLevel = JavadocMemberLevel.PUBLIC
//    options.addStringOption('Xdoclint:none', '-quiet')
//
//    exclude '**/BuildConfig.Java'
//    exclude '**/R.java'
//    destinationDir = reporting.file("$project.buildDir/outputs/jar/javadoc/")
//}

// Task to generate javadoc.jar
task javadocJar(type: Jar) {
//task javadocJar(type: Jar, dependsOn: javadoc) {
    from "generatereleaseJavadoc.destinationDir"
//    from "javadoc.destinationDir"
//    from "$project.buildDir/outputs/jar/javadoc/"

    classifier 'javadoc'
    destinationDirectory = reporting.file("$project.buildDir/outputs/jar/")
}

task sourcesJar(type: Jar) {
    from android.sourceSets.main.java.srcDirs
    classifier 'sources'
    destinationDirectory = reporting.file("$project.buildDir/outputs/jar/")
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.source

    exclude "**/R.class"
    exclude "**/BuildConfig.class"
}

ext {
    PUBLISH_GROUP_ID = 'io.github.gujingjing'
    PUBLISH_ARTIFACT_ID = "draw_arc"
    PUBLISH_VERSION = '0.0.9'
}

ext["signing.keyId"] = ''
ext["signing.password"] = ''
ext["signing.secretKeyRingFile"] = ''
ext["ossrhUsername"] = ''
ext["ossrhPassword"] = ''
ext["SONATYPE_ID"] = ''
ext["SONATYPE_NAME"] = ''
ext["SONATYPE_EMAIL"] = ''

File secretPropsFile = project.rootProject.file('local.properties')
if (secretPropsFile.exists()) {
    println "Found secret props file, loading props"
    Properties p = new Properties()
    p.load(new FileInputStream(secretPropsFile))
    p.each { name, value ->
        ext[name] = value
    }
} else {
    println "No props file, loading env vars"
}

pmd {
    ignoreFailures = false
    reportsDir = file("$project.buildDir/outputs/")
}

task pmd(type: Pmd) {
    description 'Run pmd'
    group 'verification'

    ruleSets = ["java-basic", "java-braces", "java-strings", "java-unusedcode"]
    source = fileTree('src/main/java')

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

publishing {
    publications {
        release(MavenPublication) {
            // The coordinates of the library, being set from variables that
            // we'll set up in a moment
            groupId PUBLISH_GROUP_ID
            artifactId PUBLISH_ARTIFACT_ID
            version PUBLISH_VERSION

            // Self-explanatory metadata for the most part
            pom {
                name = PUBLISH_ARTIFACT_ID
                description = 'draw arc view.'
                // If your project has a dedicated site, use its URL here
                url = 'https://github.com/gujingjing/gjj_draw_arc'
                licenses {
                    license {
                        //协议类型，一般默认Apache License2.0的话不用改：
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
//                        id = SONATYPE_ID
                        name = SONATYPE_NAME
                        email = SONATYPE_EMAIL
                    }
                }
                // Version control info, if you're using GitHub, follow the format as seen here
                scm {
                    //修改成你的Git地址：
                    connection = 'scm:git:github.com/gujingjing/gjj_draw_arc.git'
                    developerConnection = 'scm:git:ssh://github.com/gujingjing/gjj_draw_arc.git'
                    //分支地址：
                    url = 'https://github.com/gujingjing/gjj_draw_arc/tree/master'
                }
                // A slightly hacky fix so that your POM will include any transitive dependencies
                // that your library builds upon
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')

                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
            artifact(sourcesJar)
            artifact(javadocJar)
//            artifact("$buildDir/outputs/aar/${project.getName()}-release.aar")
            artifact("$buildDir/outputs/aar/progress_view-${project.version}.aar")
//            artifact androidSourcesJar
        }
    }
    repositories {
        // The repository to publish to, Sonatype/MavenCentral
        maven {
            allowInsecureProtocol = true
            // This is an arbitrary name, you may also use "mavencentral" or
            // any other name that's descriptive for you
            name = "progress_view"

            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            // You only need this if you want to publish snapshots, otherwise just set the URL
            // to the release repo directly
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

            // The username and password we've fetched earlier
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}
signing {
    sign publishing.publications
}